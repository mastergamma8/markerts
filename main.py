import os
import json
import random
import itertools
import datetime
import asyncio
import hashlib
import hmac
import urllib.parse
from typing import Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types.input_file import FSInputFile  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import uvicorn
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7631229383:AAHc5p2MxjdC9huvVAOTrW2uG7z-QegWT9Y"
DATA_FILE = "data.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (aiogram)
bot = Bot(
    token=BOT_TOKEN,
    default_bot_properties=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data() -> dict:
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as file:
        try:
            return json.load(file)
        except json.JSONDecodeError:
            return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data(data: dict) -> None:
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
def ensure_user(data: dict, user_id: str, username: str = "Unknown", photo_url: str = None) -> dict:
    today = datetime.date.today().isoformat()
    if "users" not in data:
        data["users"] = {}
    if user_id not in data["users"]:
        data["users"][user_id] = {
            "last_activation_date": today,
            "activation_count": 0,
            "tokens": [],
            "balance": 1000,
            "username": username,
            "photo_url": photo_url,
            "logged_in": False,
            "login_code": None,
            "code_expiry": None
        }
    return data["users"][user_id]

def beauty_score(num_str: str) -> int:
    zeros = num_str.count("0")
    max_repeats = max(len(list(group)) for _, group in itertools.groupby(num_str))
    bonus = 6 - len(num_str)
    return zeros + max_repeats + bonus

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–∏–ª—è (—Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞)
def generate_number() -> Tuple[str, int, str, str]:
    possible_text_colors = ["#1abc9c", "#2ecc71", "#3498db", "#9b59b6", "#34495e"]
    possible_bg_colors = ["#e74c3c", "#e67e22", "#f1c40f", "#16a085", "#27ae60"]

    num, score = None, None
    while True:
        length = random.choices([3, 4, 5, 6], weights=[1, 2, 3, 4])[0]
        candidate = "".join(random.choices("0123456789", k=length))
        score = beauty_score(candidate)
        if random.random() < 1 / (score + 1):
            num = candidate
            break

    text_color = random.choice(possible_text_colors)
    bg_color = random.choice(possible_bg_colors)
    return num, score, bg_color, text_color

def generate_login_code() -> str:
    return str(random.randint(100000, 999999))

def get_rarity(score: int) -> str:
    if score > 12:
        return "0,5%"
    elif score > 8:
        return "1%"
    else:
        return "2%"

# --------------------- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---------------------

@dp.message(Command("start"))
async def start_cmd(message: Message) -> None:
    data = load_data()
    ensure_user(data, str(message.from_user.id),
                message.from_user.username or message.from_user.first_name)
    save_data(data)
    text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Market –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤! üéâ\n\n"
        "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <–í–∞—à Telegram ID>.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /verify <–∫–æ–¥>.\n"
        "–ï—Å–ª–∏ –≤—ã —É–∂–µ –≤–æ—à–ª–∏, –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: /mint, /collection, /balance, /sell, /market, /buy, /participants, /exchange, /logout.\n"
        "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: /setavatar\n"
        "\n–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: "
        f"https://market-production-84b2.up.railway.app/auto_login?user_id={message.from_user.id}"
    )
    await message.answer(text)

@dp.message(Command("login"))
async def bot_login(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /login <–í–∞—à Telegram ID>")
        return
    user_id = parts[1]
    if user_id != str(message.from_user.id):
        await message.answer("‚ùó –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.")
        return
    data = load_data()
    user = ensure_user(data, user_id,
                       message.from_user.username or message.from_user.first_name)
    if user.get("logged_in"):
        await message.answer("–í—ã —É–∂–µ –≤–æ—à–ª–∏!")
        return
    code = generate_login_code()
    expiry = (datetime.datetime.now() + datetime.timedelta(minutes=5)).timestamp()
    user["login_code"] = code
    user["code_expiry"] = expiry
    save_data(data)
    try:
        await bot.send_message(int(user_id), f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: {code}")
        await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify <–∫–æ–¥> –¥–ª—è –≤—Ö–æ–¥–∞.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:", e)

@dp.message(Command("verify"))
async def bot_verify(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /verify <–∫–æ–¥>")
        return
    code = parts[1]
    user_id = str(message.from_user.id)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if user.get("code_expiry", 0) < datetime.datetime.now().timestamp():
        await message.answer("–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞.")
        return
    if user.get("login_code") != code:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
        return
    user["logged_in"] = True
    user["login_code"] = None
    user["code_expiry"] = None
    save_data(data)
    await message.answer("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

@dp.message(Command("logout"))
async def bot_logout(message: Message) -> None:
    user_id = str(message.from_user.id)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if user:
        user["logged_in"] = False
        save_data(data)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login <–í–∞—à Telegram ID>.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ.
@dp.message(F.photo)
async def handle_setavatar_photo(message: Message) -> None:
    if message.caption and message.caption.startswith("/setavatar"):
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
        data = load_data()
        user = ensure_user(data, str(message.from_user.id),
                           message.from_user.username or message.from_user.first_name)
        user["photo_url"] = file_url
        save_data(data)
        await message.answer("‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!")

@dp.message(Command("mint"))
async def mint_number(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id),
                       message.from_user.username or message.from_user.first_name)
    today = datetime.date.today().isoformat()
    if user["last_activation_date"] != today:
        user["last_activation_date"] = today
        user["activation_count"] = 0
    if user["activation_count"] >= 3:
        await message.answer("üòî –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    user["activation_count"] += 1
    num, score, bg_color, text_color = generate_number()
    entry = {
        "token": num,
        "score": score,
        "timestamp": datetime.datetime.now().isoformat(),
        "bg_color": bg_color,
        "text_color": text_color
    }
    user["tokens"].append(entry)
    save_data(data)
    await message.answer(f"‚ú® –í–∞—à –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {num}\nüî• –û—Ü–µ–Ω–∫–∞: {score}")

@dp.message(Command("collection"))
async def show_collection(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    tokens = user.get("tokens", [])
    if not tokens:
        await message.answer("üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    msg = "üé® " + "\n".join(f"{idx}. {t['token']} | –û—Ü–µ–Ω–∫–∞: {t['score']}" for idx, t in enumerate(tokens, start=1))
    await message.answer(msg)

@dp.message(Command("balance"))
async def show_balance(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    await message.answer(f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.get('balance', 0)} üíé")

@dp.message(Command("sell"))
async def sell_number(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /sell –Ω–æ–º–µ—Ä —Ü–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /sell 2 500)")
        return
    try:
        index = int(parts[1]) - 1
        price = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∏ —Ü–µ–Ω—ã.")
        return
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    tokens = user.get("tokens", [])
    if index < 0 or index >= len(tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return
    item = tokens.pop(index)
    if "market" not in data:
        data["market"] = []
    listing = {
        "seller_id": str(message.from_user.id),
        "token": item,
        "price": price,
        "timestamp": datetime.datetime.now().isoformat()
    }
    data["market"].append(listing)
    save_data(data)
    await message.answer(f"üöÄ –ù–æ–º–µ—Ä {item['token']} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {price} üíé!")

@dp.message(Command("market"))
async def show_market(message: Message) -> None:
    data = load_data()
    market = data.get("market", [])
    if not market:
        await message.answer("üåê –ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.")
        return
    msg = "üåê –ù–æ–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ:\n"
    for idx, listing in enumerate(market, start=1):
        seller_id = listing.get("seller_id")
        seller_name = data.get("users", {}).get(seller_id, {}).get("username", seller_id)
        token_info = listing["token"]
        msg += (f"{idx}. {token_info['token']} | –¶–µ–Ω–∞: {listing['price']} üíé | "
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name} | –û—Ü–µ–Ω–∫–∞: {token_info['score']}\n")
    await message.answer(msg)

@dp.message(Command("buy"))
async def buy_number(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /buy –Ω–æ–º–µ—Ä_–ª–∏—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy 1)")
        return
    try:
        listing_index = int(parts[1]) - 1
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞.")
        return
    data = load_data()
    market = data.get("market", [])
    if listing_index < 0 or listing_index >= len(market):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞.")
        return
    listing = market[listing_index]
    seller_id = listing.get("seller_id")
    price = listing["price"]
    buyer_id = str(message.from_user.id)
    buyer = ensure_user(data, buyer_id)
    if buyer_id == seller_id:
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä!")
        return
    if buyer.get("balance", 0) < price:
        await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    buyer["balance"] -= price
    seller = data.get("users", {}).get(seller_id)
    if seller:
        seller["balance"] = seller.get("balance", 0) + price
    buyer.setdefault("tokens", []).append(listing["token"])
    market.pop(listing_index)
    save_data(data)
    await message.answer(f"üéâ –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–º–µ—Ä {listing['token']} –∑–∞ {price} üíé!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {buyer['balance']} üíé.")
    if seller:
        try:
            await bot.send_message(int(seller_id),
                                   f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –í–∞—à –Ω–æ–º–µ—Ä {listing['token']} –∫—É–ø–ª–µ–Ω –∑–∞ {price} üíé.")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞:", e)

@dp.message(Command("participants"))
async def list_participants(message: Message) -> None:
    data = load_data()
    users = data.get("users", {})
    if not users:
        await message.answer("‚ùó –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    msg = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    for uid, info in users.items():
        cnt = len(info.get("tokens", []))
        msg += f"{info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {uid}) ‚Äî –ë–∞–ª–∞–Ω—Å: {info.get('balance', 0)} üíé, –Ω–æ–º–µ—Ä–æ–≤: {cnt}\n"
    await message.answer(msg)

@dp.message(Command("exchange"))
async def exchange_numbers(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /exchange <–º–æ–π –Ω–æ–º–µ—Ä> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∏—Ö –Ω–æ–º–µ—Ä>")
        return
    try:
        my_index = int(parts[1]) - 1
        target_uid = parts[2]
        target_index = int(parts[3]) - 1
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –∏ ID —á–∏—Å–ª–∞.")
        return
    data = load_data()
    initiator = ensure_user(data, str(message.from_user.id))
    if target_uid == str(message.from_user.id):
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return
    target = data.get("users", {}).get(target_uid)
    if not target:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 0 or my_index >= len(my_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return
    if target_index < 0 or target_index >= len(target_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    my_item = my_tokens.pop(my_index)
    target_item = target_tokens.pop(target_index)
    my_tokens.append(target_item)
    target_tokens.append(my_item)
    save_data(data)
    await message.answer(f"üéâ –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–¥–∞–ª–∏ –Ω–æ–º–µ—Ä {my_item['token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ {target_item['token']}.")
    try:
        await bot.send_message(int(target_uid),
                               f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –æ–±–º–µ–Ω—è–ª —Å –≤–∞–º–∏ –Ω–æ–º–µ—Ä–∞.\n"
                               f"–í—ã –æ—Ç–¥–∞–ª–∏ {target_item['token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ {my_item['token']}.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞:", e)

# --------------------- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---------------------
# –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã—Ö –≤ ADMIN_IDS) –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã.
ADMIN_IDS = {"1809630966", "7053559428"}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

@dp.message(Command("setbalance"))
async def set_balance(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /setbalance <user_id> <–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å>")
        return
    target_user_id = parts[1]
    try:
        new_balance = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    old_balance = user.get("balance", 0)
    user["balance"] = new_balance
    save_data(data)
    await message.answer(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}) –∏–∑–º–µ–Ω—ë–Ω —Å {old_balance} –Ω–∞ {new_balance}."
    )

@dp.message(Command("listtokens"))
async def list_tokens_admin(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.get_args().split()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /listtokens <user_id>")
        return
    target_user_id = args[0]
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    tokens = user.get("tokens", [])
    if not tokens:
        await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
        return
    msg = f"–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}):\n"
    for idx, token in enumerate(tokens, start=1):
        msg += f"{idx}. {token['token']} | –û—Ü–µ–Ω–∫–∞: {token['score']}\n"
    await message.answer(msg)

@dp.message(Command("settoken"))
async def set_token_admin(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) < 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /settoken <user_id> <–Ω–æ–º–µ—Ä_–ø–æ–∑–∏—Ü–∏–∏> <–Ω–æ–≤—ã–π_–Ω–æ–º–µ—Ä> [–Ω–æ–≤–∞—è_–æ—Ü–µ–Ω–∫–∞]")
        return
    target_user_id = parts[1]
    try:
        token_index = int(parts[2]) - 1  # 1-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
        return
    new_token_value = parts[3]
    new_score = None
    if len(parts) >= 5:
        try:
            new_score = int(parts[4])
        except ValueError:
            await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
            return
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    tokens = user.get("tokens", [])
    if token_index < 0 or token_index >= len(tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞.")
        return
    old_token = tokens[token_index].copy()
    tokens[token_index]["token"] = new_token_value
    if new_score is not None:
        tokens[token_index]["score"] = new_score
    save_data(data)
    await message.answer(
        f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}) –∏–∑–º–µ–Ω—ë–Ω.\n"
        f"–ë—ã–ª–æ: {old_token}\n–°—Ç–∞–ª–æ: {tokens[token_index]}"
    )

@dp.message(Command("getdata"))
async def get_data_file(message: Message) -> None:
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not os.path.exists(DATA_FILE):
        await message.answer("–§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª data.json –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è FSInputFile
    document = FSInputFile(DATA_FILE)
    await message.answer_document(document=document, caption="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ data.json")

# --------------------- –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (FastAPI) ---------------------
app = FastAPI()

if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")
templates.env.globals["enumerate"] = enumerate
templates.env.globals["get_rarity"] = get_rarity

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    user_id = request.cookies.get("user_id")
    data = load_data()
    user = data.get("users", {}).get(user_id) if user_id else None
    market = data.get("market", [])
    return templates.TemplateResponse("index.html", {
        "request": request,
        "user": user,
        "user_id": user_id,
        "market": market,
        "users": data.get("users", {})
    })

@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

@app.post("/login", response_class=HTMLResponse)
async def login_post(request: Request, user_id: str = Form(None)):
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID.", status_code=400)
    data = load_data()
    user = ensure_user(data, user_id)
    if user.get("logged_in"):
        response = RedirectResponse(url=f"/profile/{user_id}", status_code=303)
        response.set_cookie("user_id", user_id, max_age=60*60*24*30, path="/")
        return response
    code = generate_login_code()
    expiry = (datetime.datetime.now() + datetime.timedelta(minutes=5)).timestamp()
    user["login_code"] = code
    user["code_expiry"] = expiry
    save_data(data)
    try:
        await bot.send_message(int(user_id), f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: {code}")
    except Exception as e:
        return HTMLResponse("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram.", status_code=500)
    return templates.TemplateResponse("verify.html", {"request": request, "user_id": user_id})

@app.post("/verify", response_class=HTMLResponse)
async def verify_post(request: Request, user_id: str = Form(...), code: str = Form(...)):
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    if user.get("code_expiry", 0) < datetime.datetime.now().timestamp():
        return HTMLResponse("–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞.", status_code=400)
    if user.get("login_code") != code:
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.", status_code=400)
    user["logged_in"] = True
    user["login_code"] = None
    user["code_expiry"] = None
    save_data(data)
    response = RedirectResponse(url=f"/profile/{user_id}", status_code=303)
    response.set_cookie("user_id", user_id, max_age=60*60*24*30, path="/")
    return response

@app.get("/logout", response_class=HTMLResponse)
async def logout(request: Request):
    user_id = request.cookies.get("user_id")
    if user_id:
        data = load_data()
        user = data.get("users", {}).get(user_id)
        if user:
            user["logged_in"] = False
            save_data(data)
    response = RedirectResponse(url="/", status_code=303)
    response.delete_cookie("user_id", path="/")
    return response

@app.get("/auto_login", response_class=HTMLResponse)
async def auto_login(request: Request, user_id: str):
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user or not user.get("logged_in"):
        return RedirectResponse(url="/login", status_code=303)
    response = RedirectResponse(url=f"/profile/{user_id}", status_code=303)
    response.set_cookie("user_id", user_id, max_age=60*60*24*30, path="/")
    return response

@app.get("/profile/{user_id}", response_class=HTMLResponse)
async def profile(request: Request, user_id: str):
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    current_user_id = request.cookies.get("user_id")
    is_owner = (current_user_id == user_id)
    return templates.TemplateResponse("profile.html", {
        "request": request,
        "user": user,
        "user_id": user_id,
        "is_owner": is_owner
    })

@app.get("/mint", response_class=HTMLResponse)
async def web_mint(request: Request):
    return templates.TemplateResponse("mint.html", {"request": request})

@app.post("/mint", response_class=HTMLResponse)
async def web_mint_post(request: Request, user_id: str = Form(None)):
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    user = ensure_user(data, user_id)
    today = datetime.date.today().isoformat()
    if user["last_activation_date"] != today:
        user["last_activation_date"] = today
        user["activation_count"] = 0
    if user["activation_count"] >= 3:
        return templates.TemplateResponse("mint.html", {
            "request": request,
            "error": "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
            "user_id": user_id
        })
    user["activation_count"] += 1
    num, score, bg_color, text_color = generate_number()
    entry = {
        "token": num,
        "score": score,
        "timestamp": datetime.datetime.now().isoformat(),
        "bg_color": bg_color,
        "text_color": text_color
    }
    user["tokens"].append(entry)
    save_data(data)
    return templates.TemplateResponse("profile.html", {"request": request, "user": user, "user_id": user_id})

@app.get("/sell", response_class=HTMLResponse)
async def web_sell(request: Request):
    return templates.TemplateResponse("sell.html", {"request": request})

@app.post("/sell", response_class=HTMLResponse)
async def web_sell_post(request: Request, user_id: str = Form(None), token_index: int = Form(...), price: int = Form(...)):
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    tokens = user.get("tokens", [])
    if token_index < 1 or token_index > len(tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.", status_code=400)
    token = tokens.pop(token_index - 1)
    if "market" not in data:
        data["market"] = []
    listing = {
        "seller_id": user_id,
        "token": token,
        "price": price,
        "timestamp": datetime.datetime.now().isoformat()
    }
    data["market"].append(listing)
    save_data(data)
    return templates.TemplateResponse("profile.html", {"request": request, "user": user, "user_id": user_id})

@app.get("/exchange", response_class=HTMLResponse)
async def web_exchange(request: Request):
    return templates.TemplateResponse("exchange.html", {"request": request})

@app.post("/exchange", response_class=HTMLResponse)
async def web_exchange_post(request: Request, user_id: str = Form(None), my_index: int = Form(...), target_id: str = Form(...), target_index: int = Form(...)):
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    initiator = data.get("users", {}).get(user_id)
    target = data.get("users", {}).get(target_id)
    if not initiator or not target:
        return HTMLResponse("–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 1 or my_index > len(my_tokens) or target_index < 1 or target_index > len(target_tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", status_code=400)
    my_token = my_tokens.pop(my_index - 1)
    target_token = target_tokens.pop(target_index - 1)
    my_tokens.append(target_token)
    target_tokens.append(my_token)
    save_data(data)
    return templates.TemplateResponse("profile.html", {"request": request, "user": initiator, "user_id": user_id})

@app.get("/participants", response_class=HTMLResponse)
async def web_participants(request: Request):
    data = load_data()
    users = data.get("users", {})
    return templates.TemplateResponse("participants.html", {"request": request, "users": users})

@app.get("/market", response_class=HTMLResponse)
async def web_market(request: Request):
    data = load_data()
    market = data.get("market", [])
    return templates.TemplateResponse("market.html", {
        "request": request,
        "market": market,
        "users": data.get("users", {}),
        "buyer_id": request.cookies.get("user_id")
    })

@app.post("/buy/{listing_index}")
async def web_buy(request: Request, listing_index: int, buyer_id: str = Form(None)):
    if not buyer_id:
        buyer_id = request.cookies.get("user_id")
    if not buyer_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    market = data.get("market", [])
    if listing_index < 0 or listing_index >= len(market):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞.", status_code=400)
    listing = market[listing_index]
    seller_id = listing.get("seller_id")
    price = listing["price"]
    buyer = data.get("users", {}).get(buyer_id)
    if not buyer:
        return HTMLResponse("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    if buyer.get("balance", 0) < price:
        return HTMLResponse("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", status_code=400)
    buyer["balance"] -= price
    seller = data.get("users", {}).get(seller_id)
    if seller:
        seller["balance"] = seller.get("balance", 0) + price
    buyer.setdefault("tokens", []).append(listing["token"])
    market.pop(listing_index)
    save_data(data)
    return templates.TemplateResponse("profile.html", {"request": request, "user": buyer, "user_id": buyer_id})

# --------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---------------------
async def main():
    bot_task = asyncio.create_task(dp.start_polling(bot))
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    web_task = asyncio.create_task(server.serve())
    await asyncio.gather(bot_task, web_task)

if __name__ == "__main__":
    asyncio.run(main())
