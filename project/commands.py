# commands.py
import datetime
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message
from utils import load_data, save_data, ensure_user, generate_number, generate_login_code
from bot import dp, bot

@dp.message(Command("start"))
async def start_cmd(message: Message) -> None:
    data = load_data()
    ensure_user(data, str(message.from_user.id), message.from_user.username or message.from_user.first_name)
    save_data(data)
    text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Market –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤! üéâ\n\n"
        "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <–í–∞—à Telegram ID>.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /verify <–∫–æ–¥>.\n"
        "–ï—Å–ª–∏ –≤—ã —É–∂–µ –≤–æ—à–ª–∏, –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: /mint, /collection, /balance, /sell, /market, /buy, /participants, /exchange, /logout.\n"
        "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: /setavatar\n"
        "\n–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: "
        f"https://market-production-84b2.up.railway.app/auto_login?user_id={message.from_user.id}"
    )
    await message.answer(text)

@dp.message(Command("login"))
async def login_cmd(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /login <–í–∞—à Telegram ID>")
        return
    user_id = parts[1]
    if user_id != str(message.from_user.id):
        await message.answer("‚ùó –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.")
        return
    data = load_data()
    user = ensure_user(data, user_id, message.from_user.username or message.from_user.first_name)
    if user.get("logged_in"):
        await message.answer("–í—ã —É–∂–µ –≤–æ—à–ª–∏!")
        return
    code = generate_login_code()
    expiry = (datetime.datetime.now() + datetime.timedelta(minutes=5)).timestamp()
    user["login_code"] = code
    user["code_expiry"] = expiry
    save_data(data)
    try:
        await bot.send_message(int(user_id), f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: {code}")
        await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify <–∫–æ–¥> –¥–ª—è –≤—Ö–æ–¥–∞.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("verify"))
async def verify_cmd(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /verify <–∫–æ–¥>")
        return
    code = parts[1]
    user_id = str(message.from_user.id)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if user.get("code_expiry", 0) < datetime.datetime.now().timestamp():
        await message.answer("–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞.")
        return
    if user.get("login_code") != code:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
        return
    user["logged_in"] = True
    user["login_code"] = None
    user["code_expiry"] = None
    save_data(data)
    await message.answer("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

@dp.message(Command("logout"))
async def logout_cmd(message: Message) -> None:
    user_id = str(message.from_user.id)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if user:
        user["logged_in"] = False
        save_data(data)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login <–í–∞—à Telegram ID>.")

@dp.message(Command("setavatar"))
async def setavatar_cmd(message: Message) -> None:
    if message.caption and message.caption.startswith("/setavatar"):
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"
        data = load_data()
        user = ensure_user(data, str(message.from_user.id), message.from_user.username or message.from_user.first_name)
        user["photo_url"] = file_url
        save_data(data)
        await message.answer("‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!")

@dp.message(Command("mint"))
async def mint_cmd(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id), message.from_user.username or message.from_user.first_name)
    today = datetime.date.today().isoformat()
    if user["last_activation_date"] != today:
        user["last_activation_date"] = today
        user["activation_count"] = 0
    if user["activation_count"] >= 3:
        await message.answer("üòî –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    user["activation_count"] += 1
    num, score, bg_color, text_color = generate_number()
    entry = {
        "token": num,
        "score": score,
        "timestamp": datetime.datetime.now().isoformat(),
        "bg_color": bg_color,
        "text_color": text_color
    }
    user["tokens"].append(entry)
    save_data(data)
    await message.answer(f"‚ú® –í–∞—à –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {num}\nüî• –û—Ü–µ–Ω–∫–∞: {score}")

@dp.message(Command("collection"))
async def collection_cmd(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    tokens = user.get("tokens", [])
    if not tokens:
        await message.answer("üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    msg = "üé® " + "\n".join(f"{idx}. {t['token']} | –û—Ü–µ–Ω–∫–∞: {t['score']}" for idx, t in enumerate(tokens, start=1))
    await message.answer(msg)

@dp.message(Command("balance"))
async def balance_cmd(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    await message.answer(f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.get('balance', 0)} üíé")

@dp.message(Command("sell"))
async def sell_cmd(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /sell –Ω–æ–º–µ—Ä —Ü–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /sell 2 500)")
        return
    try:
        index = int(parts[1]) - 1
        price = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∏ —Ü–µ–Ω—ã.")
        return
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    tokens = user.get("tokens", [])
    if index < 0 or index >= len(tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return
    item = tokens.pop(index)
    if "market" not in data:
        data["market"] = []
    listing = {
        "seller_id": str(message.from_user.id),
        "token": item,
        "price": price,
        "timestamp": datetime.datetime.now().isoformat()
    }
    data["market"].append(listing)
    save_data(data)
    await message.answer(f"üöÄ –ù–æ–º–µ—Ä {item['token']} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {price} üíé!")

@dp.message(Command("market"))
async def market_cmd(message: Message) -> None:
    data = load_data()
    market = data.get("market", [])
    if not market:
        await message.answer("üåê –ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.")
        return
    msg = "üåê –ù–æ–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ:\n"
    for idx, listing in enumerate(market, start=1):
        seller_id = listing.get("seller_id")
        seller_name = data.get("users", {}).get(seller_id, {}).get("username", seller_id)
        token_info = listing["token"]
        msg += (f"{idx}. {token_info['token']} | –¶–µ–Ω–∞: {listing['price']} üíé | "
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name} | –û—Ü–µ–Ω–∫–∞: {token_info['score']}\n")
    await message.answer(msg)

@dp.message(Command("buy"))
async def buy_cmd(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /buy –Ω–æ–º–µ—Ä_–ª–∏—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy 1)")
        return
    try:
        listing_index = int(parts[1]) - 1
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞.")
        return
    data = load_data()
    market = data.get("market", [])
    if listing_index < 0 or listing_index >= len(market):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞.")
        return
    listing = market[listing_index]
    seller_id = listing.get("seller_id")
    price = listing["price"]
    buyer_id = str(message.from_user.id)
    buyer = ensure_user(data, buyer_id)
    if buyer_id == seller_id:
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä!")
        return
    if buyer.get("balance", 0) < price:
        await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    buyer["balance"] -= price
    seller = data.get("users", {}).get(seller_id)
    if seller:
        seller["balance"] = seller.get("balance", 0) + price
    buyer.setdefault("tokens", []).append(listing["token"])
    market.pop(listing_index)
    save_data(data)
    await message.answer(f"üéâ –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–º–µ—Ä {listing['token']} –∑–∞ {price} üíé!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {buyer['balance']} üíé.")
    if seller:
        try:
            await bot.send_message(int(seller_id), f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –í–∞—à –Ω–æ–º–µ—Ä {listing['token']} –∫—É–ø–ª–µ–Ω –∑–∞ {price} üíé.")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞:", e)

@dp.message(Command("participants"))
async def participants_cmd(message: Message) -> None:
    data = load_data()
    users = data.get("users", {})
    if not users:
        await message.answer("‚ùó –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    msg = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    for uid, info in users.items():
        cnt = len(info.get("tokens", []))
        msg += f"{info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {uid}) ‚Äî –ë–∞–ª–∞–Ω—Å: {info.get('balance', 0)} üíé, –Ω–æ–º–µ—Ä–æ–≤: {cnt}\n"
    await message.answer(msg)

@dp.message(Command("exchange"))
async def exchange_cmd(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /exchange <–º–æ–π –Ω–æ–º–µ—Ä> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∏—Ö –Ω–æ–º–µ—Ä>")
        return
    try:
        my_index = int(parts[1]) - 1
        target_uid = parts[2]
        target_index = int(parts[3]) - 1
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –∏ ID —á–∏—Å–ª–∞.")
        return
    data = load_data()
    initiator = ensure_user(data, str(message.from_user.id))
    if target_uid == str(message.from_user.id):
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return
    target = data.get("users", {}).get(target_uid)
    if not target:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 0 or my_index >= len(my_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return
    if target_index < 0 or target_index >= len(target_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    my_item = my_tokens.pop(my_index)
    target_item = target_tokens.pop(target_index)
    my_tokens.append(target_item)
    target_tokens.append(my_item)
    save_data(data)
    await message.answer(f"üéâ –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–¥–∞–ª–∏ –Ω–æ–º–µ—Ä {my_item['token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ {target_item['token']}.")
    try:
        await bot.send_message(int(target_uid),
                               f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –æ–±–º–µ–Ω—è–ª —Å –≤–∞–º–∏ –Ω–æ–º–µ—Ä–∞.\n"
                               f"–í—ã –æ—Ç–¥–∞–ª–∏ {target_item['token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ {my_item['token']}.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞:", e)
